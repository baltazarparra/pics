{"version":3,"sources":["__generated__/DeletePostMutation.graphql.js","__generated__/Post_viewer.graphql.js","__generated__/Post_post.graphql.js","__generated__/ListPage_viewer.graphql.js","__generated__/AppAllPostQuery.graphql.js","__generated__/CreatePostMutation.graphql.js","__generated__/CreatePageViewerQuery.graphql.js","Environment.js","DeletePostMutation.js","Post.js","ListPage.js","App.js","CreatePostMutation.js","CreatePage.js","index.js","registerServiceWorker.js"],"names":["module","exports","require","Environment","Network","RecordSource","store","Store","environment","network","create","operation","variables","fetch","method","headers","body","JSON","stringify","query","text","then","response","json","mutation","Post","_handleDelete","postId","viewerId","input","id","clientMutationId","commitMutation","onError","err","console","error","updater","proxyStore","deletedId","getRootField","getValue","viewerProxy","get","connection","ConnectionHandler","getConnection","deleteNode","DeletePostMutation","props","post","viewer","className","style","backgroundImage","this","imageUrl","backgroundSize","paddingBottom","description","onClick","React","Component","createFragmentContainer","ListPage","to","maxWidth","allPosts","edges","map","node","key","__id","AppAllPostQuery","App","render","message","tempID","callback","optimisticUpdater","newPost","setValue","insertEdgeAfter","getLinkedRecord","onCompleted","CreatePageViewerQuery","CreatePage","state","_handlePost","CreatePostMutation","router","replace","value","placeholder","onChange","e","setState","target","src","alt","textAlign","color","withRouter","ReactDOM","history","browserHistory","path","component","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch"],"mappings":"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","file":"static/js/main.e2751459.chunk.js","sourcesContent":["/**\n * @flow\n * @relayHash e104ed8ca1d0796e6bbf18554f55e54f\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteBatch} from 'relay-runtime';\nexport type DeletePostMutationVariables = {|\n  input: {\n    id: string;\n    clientMutationId: string;\n  };\n|};\n\nexport type DeletePostMutationResponse = {|\n  +deletePost: ?{|\n    +deletedId: ?string;\n  |};\n|};\n*/\n\n\n/*\nmutation DeletePostMutation(\n  $input: DeletePostInput!\n) {\n  deletePost(input: $input) {\n    deletedId\n  }\n}\n*/\n\nconst batch /*: ConcreteBatch*/ = {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      {\n        \"kind\": \"LocalArgument\",\n        \"name\": \"input\",\n        \"type\": \"DeletePostInput!\",\n        \"defaultValue\": null\n      }\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"DeletePostMutation\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"input\",\n            \"variableName\": \"input\",\n            \"type\": \"DeletePostInput!\"\n          }\n        ],\n        \"concreteType\": \"DeletePostPayload\",\n        \"name\": \"deletePost\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"args\": null,\n            \"name\": \"deletedId\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Mutation\"\n  },\n  \"id\": null,\n  \"kind\": \"Batch\",\n  \"metadata\": {},\n  \"name\": \"DeletePostMutation\",\n  \"query\": {\n    \"argumentDefinitions\": [\n      {\n        \"kind\": \"LocalArgument\",\n        \"name\": \"input\",\n        \"type\": \"DeletePostInput!\",\n        \"defaultValue\": null\n      }\n    ],\n    \"kind\": \"Root\",\n    \"name\": \"DeletePostMutation\",\n    \"operation\": \"mutation\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"input\",\n            \"variableName\": \"input\",\n            \"type\": \"DeletePostInput!\"\n          }\n        ],\n        \"concreteType\": \"DeletePostPayload\",\n        \"name\": \"deletePost\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"args\": null,\n            \"name\": \"deletedId\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"text\": \"mutation DeletePostMutation(\\n  $input: DeletePostInput!\\n) {\\n  deletePost(input: $input) {\\n    deletedId\\n  }\\n}\\n\"\n};\n\nmodule.exports = batch;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteFragment} from 'relay-runtime';\nexport type Post_viewer = {|\n  +id: string;\n|};\n*/\n\n\nconst fragment /*: ConcreteFragment*/ = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"Post_viewer\",\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"args\": null,\n      \"name\": \"id\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Viewer\"\n};\n\nmodule.exports = fragment;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteFragment} from 'relay-runtime';\nexport type Post_post = {|\n  +id: string;\n  +description: string;\n  +imageUrl: string;\n|};\n*/\n\n\nconst fragment /*: ConcreteFragment*/ = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"Post_post\",\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"args\": null,\n      \"name\": \"id\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"args\": null,\n      \"name\": \"description\",\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"args\": null,\n      \"name\": \"imageUrl\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Post\"\n};\n\nmodule.exports = fragment;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteFragment} from 'relay-runtime';\nexport type ListPage_viewer = {|\n  +allPosts: ?{|\n    +edges: ?$ReadOnlyArray<?{|\n      +node: ?{| |};\n    |}>;\n  |};\n|};\n*/\n\n\nconst fragment /*: ConcreteFragment*/ = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"connection\": [\n      {\n        \"count\": null,\n        \"cursor\": null,\n        \"direction\": \"backward\",\n        \"path\": [\n          \"allPosts\"\n        ]\n      }\n    ]\n  },\n  \"name\": \"ListPage_viewer\",\n  \"selections\": [\n    {\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"Post_viewer\",\n      \"args\": null\n    },\n    {\n      \"kind\": \"LinkedField\",\n      \"alias\": \"allPosts\",\n      \"args\": null,\n      \"concreteType\": \"PostConnection\",\n      \"name\": \"__ListPage_allPosts_connection\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"kind\": \"LinkedField\",\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"PostEdge\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"kind\": \"LinkedField\",\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"Post\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"kind\": \"FragmentSpread\",\n                  \"name\": \"Post_post\",\n                  \"args\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Viewer\"\n};\n\nmodule.exports = fragment;\n","/**\n * @flow\n * @relayHash b036d8cd8aa0c16ea03c6884801c3927\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteBatch} from 'relay-runtime';\nexport type AppAllPostQueryResponse = {|\n  +viewer: {| |};\n|};\n*/\n\n\n/*\nquery AppAllPostQuery {\n  viewer {\n    ...ListPage_viewer\n    id\n  }\n}\n\nfragment ListPage_viewer on Viewer {\n  ...Post_viewer\n  allPosts(last: 100, orderBy: createdAt_DESC) {\n    edges {\n      node {\n        ...Post_post\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n\nfragment Post_viewer on Viewer {\n  id\n}\n\nfragment Post_post on Post {\n  id\n  description\n  imageUrl\n}\n*/\n\nconst batch /*: ConcreteBatch*/ = {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AppAllPostQuery\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Viewer\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"ListPage_viewer\",\n            \"args\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"id\": null,\n  \"kind\": \"Batch\",\n  \"metadata\": {},\n  \"name\": \"AppAllPostQuery\",\n  \"query\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Root\",\n    \"name\": \"AppAllPostQuery\",\n    \"operation\": \"query\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Viewer\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"args\": null,\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"kind\": \"InlineFragment\",\n            \"type\": \"Viewer\",\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"args\": [\n                  {\n                    \"kind\": \"Literal\",\n                    \"name\": \"last\",\n                    \"value\": 100,\n                    \"type\": \"Int\"\n                  },\n                  {\n                    \"kind\": \"Literal\",\n                    \"name\": \"orderBy\",\n                    \"value\": \"createdAt_DESC\",\n                    \"type\": \"PostOrderBy\"\n                  }\n                ],\n                \"concreteType\": \"PostConnection\",\n                \"name\": \"allPosts\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"PostEdge\",\n                    \"name\": \"edges\",\n                    \"plural\": true,\n                    \"selections\": [\n                      {\n                        \"kind\": \"LinkedField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"Post\",\n                        \"name\": \"node\",\n                        \"plural\": false,\n                        \"selections\": [\n                          {\n                            \"kind\": \"ScalarField\",\n                            \"alias\": null,\n                            \"args\": null,\n                            \"name\": \"id\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"kind\": \"ScalarField\",\n                            \"alias\": null,\n                            \"args\": null,\n                            \"name\": \"description\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"kind\": \"ScalarField\",\n                            \"alias\": null,\n                            \"args\": null,\n                            \"name\": \"imageUrl\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"kind\": \"ScalarField\",\n                            \"alias\": null,\n                            \"args\": null,\n                            \"name\": \"__typename\",\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      },\n                      {\n                        \"kind\": \"ScalarField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"name\": \"cursor\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"PageInfo\",\n                    \"name\": \"pageInfo\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"kind\": \"ScalarField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"name\": \"endCursor\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"kind\": \"ScalarField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"name\": \"hasNextPage\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"kind\": \"ScalarField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"name\": \"hasPreviousPage\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"kind\": \"ScalarField\",\n                        \"alias\": null,\n                        \"args\": null,\n                        \"name\": \"startCursor\",\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": \"allPosts{\\\"last\\\":100,\\\"orderBy\\\":\\\"createdAt_DESC\\\"}\"\n              },\n              {\n                \"kind\": \"LinkedHandle\",\n                \"alias\": null,\n                \"args\": [\n                  {\n                    \"kind\": \"Literal\",\n                    \"name\": \"last\",\n                    \"value\": 100,\n                    \"type\": \"Int\"\n                  },\n                  {\n                    \"kind\": \"Literal\",\n                    \"name\": \"orderBy\",\n                    \"value\": \"createdAt_DESC\",\n                    \"type\": \"PostOrderBy\"\n                  }\n                ],\n                \"handle\": \"connection\",\n                \"name\": \"allPosts\",\n                \"key\": \"ListPage_allPosts\",\n                \"filters\": []\n              }\n            ]\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"text\": \"query AppAllPostQuery {\\n  viewer {\\n    ...ListPage_viewer\\n    id\\n  }\\n}\\n\\nfragment ListPage_viewer on Viewer {\\n  ...Post_viewer\\n  allPosts(last: 100, orderBy: createdAt_DESC) {\\n    edges {\\n      node {\\n        ...Post_post\\n        id\\n        __typename\\n      }\\n      cursor\\n    }\\n    pageInfo {\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n    }\\n  }\\n}\\n\\nfragment Post_viewer on Viewer {\\n  id\\n}\\n\\nfragment Post_post on Post {\\n  id\\n  description\\n  imageUrl\\n}\\n\"\n};\n\nmodule.exports = batch;\n","/**\n * @flow\n * @relayHash 5cd55172a0c56878ddf9c1dc264c5e9d\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteBatch} from 'relay-runtime';\nexport type CreatePostMutationVariables = {|\n  input: {\n    description: string;\n    imageUrl: string;\n    clientMutationId: string;\n  };\n|};\n\nexport type CreatePostMutationResponse = {|\n  +createPost: ?{|\n    +post: ?{|\n      +id: string;\n      +description: string;\n      +imageUrl: string;\n    |};\n  |};\n|};\n*/\n\n\n/*\nmutation CreatePostMutation(\n  $input: CreatePostInput!\n) {\n  createPost(input: $input) {\n    post {\n      id\n      description\n      imageUrl\n    }\n  }\n}\n*/\n\nconst batch /*: ConcreteBatch*/ = {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      {\n        \"kind\": \"LocalArgument\",\n        \"name\": \"input\",\n        \"type\": \"CreatePostInput!\",\n        \"defaultValue\": null\n      }\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"CreatePostMutation\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"input\",\n            \"variableName\": \"input\",\n            \"type\": \"CreatePostInput!\"\n          }\n        ],\n        \"concreteType\": \"CreatePostPayload\",\n        \"name\": \"createPost\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Post\",\n            \"name\": \"post\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"id\",\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"description\",\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"imageUrl\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Mutation\"\n  },\n  \"id\": null,\n  \"kind\": \"Batch\",\n  \"metadata\": {},\n  \"name\": \"CreatePostMutation\",\n  \"query\": {\n    \"argumentDefinitions\": [\n      {\n        \"kind\": \"LocalArgument\",\n        \"name\": \"input\",\n        \"type\": \"CreatePostInput!\",\n        \"defaultValue\": null\n      }\n    ],\n    \"kind\": \"Root\",\n    \"name\": \"CreatePostMutation\",\n    \"operation\": \"mutation\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"input\",\n            \"variableName\": \"input\",\n            \"type\": \"CreatePostInput!\"\n          }\n        ],\n        \"concreteType\": \"CreatePostPayload\",\n        \"name\": \"createPost\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Post\",\n            \"name\": \"post\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"id\",\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"description\",\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"args\": null,\n                \"name\": \"imageUrl\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"text\": \"mutation CreatePostMutation(\\n  $input: CreatePostInput!\\n) {\\n  createPost(input: $input) {\\n    post {\\n      id\\n      description\\n      imageUrl\\n    }\\n  }\\n}\\n\"\n};\n\nmodule.exports = batch;\n","/**\n * @flow\n * @relayHash e6ff0c848516b8d41a657c4c1d7cf34d\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type {ConcreteBatch} from 'relay-runtime';\nexport type CreatePageViewerQueryResponse = {|\n  +viewer: {|\n    +id: string;\n  |};\n|};\n*/\n\n\n/*\nquery CreatePageViewerQuery {\n  viewer {\n    id\n  }\n}\n*/\n\nconst batch /*: ConcreteBatch*/ = {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"CreatePageViewerQuery\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Viewer\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"args\": null,\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"id\": null,\n  \"kind\": \"Batch\",\n  \"metadata\": {},\n  \"name\": \"CreatePageViewerQuery\",\n  \"query\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Root\",\n    \"name\": \"CreatePageViewerQuery\",\n    \"operation\": \"query\",\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Viewer\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"args\": null,\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"text\": \"query CreatePageViewerQuery {\\n  viewer {\\n    id\\n  }\\n}\\n\"\n};\n\nmodule.exports = batch;\n","const {\n    Environment,\n    Network,\n    RecordSource,\n    Store,\n} = require('relay-runtime')\n\nconst store = new Store(new RecordSource())\n\nconst network = Network.create((operation, variables) => {\n    return fetch('https://api.graph.cool/relay/v1/cjzymojvd5cft0154i7hpc6dw', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables,\n        }),\n    }).then(response => {\n        return response.json()\n    })\n})\n\nconst environment = new Environment({\n    network,\n    store,\n})\n\nexport default environment","import {\n  commitMutation,\n  graphql,\n} from 'react-relay'\nimport {ConnectionHandler} from 'relay-runtime'\nimport environment from './Environment'\n\nconst mutation = graphql`\n  mutation DeletePostMutation($input: DeletePostInput!) {\n    deletePost(input: $input) {\n      deletedId\n    }\n  }\n`;\n\nexport default function DeletePostMutation(postId, viewerId) {\n  const variables = {\n    input: {\n      id: postId,\n      clientMutationId: \"\"\n    },\n  }\n  commitMutation(\n    environment,\n    {\n      mutation,\n      variables,\n      onError: err => console.error(err),\n      updater: (proxyStore) => {\n        const deletePostField = proxyStore.getRootField('deletePost')\n        const deletedId = deletePostField.getValue('deletedId')\n        const viewerProxy = proxyStore.get(viewerId)\n        const connection = ConnectionHandler.getConnection(viewerProxy, 'ListPage_allPosts')\n        ConnectionHandler.deleteNode(connection, deletedId)\n      }\n    },\n  )\n}","import React from 'react'\nimport {\n  createFragmentContainer,\n  graphql\n} from 'react-relay'\nimport DeletePostMutation from './DeletePostMutation'\n\nclass Post extends React.Component {\n    render() {\n        return (\n            <div className='pa3 bg-black-05 ma3'>\n            <div\n              className='w-100'\n              style={{\n                backgroundImage: `url(${this.props.post.imageUrl})`,\n                backgroundSize: 'cover',\n                paddingBottom: '100%',\n              }}\n            />\n            <div className='pt3'>\n              {this.props.post.description}&nbsp;\n              <span \n                className='red f6 pointer dim' \n                onClick={this._handleDelete}\n              >Delete</span>\n            </div>\n          </div>\n        )\n    }\n\n    _handleDelete = () => {\n      DeletePostMutation(this.props.post.id, this.props.viewer.id)\n    }\n}\n\nexport default createFragmentContainer(\n  Post,\n  graphql`\n    fragment Post_viewer on Viewer {\n      id\n    }\n    fragment Post_post on Post {\n      id\n      description\n      imageUrl\n    }\n  `,\n)","import React from 'react'\nimport Post from './Post'\nimport {\n    createFragmentContainer,\n    graphql\n  } from 'react-relay'\nimport { Link } from 'react-router'\n\nclass ListPage extends React.Component {\n    render() {\n        return (\n            <div className='w-100 flex justify-center'>\n                <Link to='/create' className='fixed bg-white top-0 right-0 pa4 ttu dim black no-underline'>\n                    + New Post\n                </Link>\n                <div className='w-100' style={{ maxWidth: 400 }}>\n                    {this.props.viewer.allPosts.edges.map(({node}) =>\n                        <Post key={node.__id} post={node} viewer={this.props.viewer} />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default createFragmentContainer(\n  ListPage,\n  graphql`\n    fragment ListPage_viewer on Viewer {\n      ...Post_viewer\n      allPosts(last: 100, orderBy: createdAt_DESC) @connection(key: \"ListPage_allPosts\", filters: []) {\n        edges {\n          node {\n            ...Post_post\n          }\n        }\n      }\n    }\n  `,\n)","import React, { Component } from 'react'\nimport ListPage from './ListPage'\nimport {\n  QueryRenderer,\n  graphql\n} from 'react-relay'\nimport environment from './Environment'\n\nconst AppAllPostQuery = graphql`\n  query AppAllPostQuery {\n    viewer {\n      ...ListPage_viewer\n    }\n  }\n`\nclass App extends Component {\n  render() {\n    return (\n      <QueryRenderer\n        environment={environment}\n        query={AppAllPostQuery}\n        render={({error, props}) => {\n          if (error) {\n            return <div>{error.message}</div>\n          } else if (props) {\n            return <ListPage viewer={props.viewer} />\n          }\n          return <div>Loading...</div>\n        }}\n      />\n    )\n  }\n}\n\nexport default App","import {\n    commitMutation,\n    graphql,\n} from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\nimport environment from './Environment'\n\nconst mutation = graphql`\n mutation CreatePostMutation($input: CreatePostInput!) {\n     createPost(input: $input) {\n         post {\n             id\n             description\n             imageUrl\n         }\n     }\n }\n`\n\nlet tempID = 0\n\nexport default (description, imageUrl, viewerId, callback) => {\n    const variables = {\n        input: {\n            description,\n            imageUrl,\n            clientMutationId: '',\n        },\n    }\n    commitMutation(\n        environment,\n        {\n            mutation,\n            variables,\n            optimisticUpdater: (proxyStore) => {\n                // 1 - create the `newPost` as a mock that can be added to the store\n                const id = 'client:newPost:' + tempID++\n                const newPost = proxyStore.create(id, 'Post')\n                newPost.setValue(id, 'id')\n                newPost.setValue(description, 'description')\n                newPost.setValue(imageUrl, 'imageUrl')\n\n                // 2 - add `newPost` to the store\n                const viewerProxy = proxyStore.get(viewerId)\n                const connection = ConnectionHandler.getConnection(viewerProxy, 'ListPage_allPosts')\n                if (connection) {\n                    ConnectionHandler.insertEdgeAfter(connection, newPost)\n                }\n            },\n            updater: (proxyStore) => {\n                // 1 - retrieve the `newPost` from the server response\n                const createPostField = proxyStore.getRootField('createPost')\n                const newPost = createPostField.getLinkedRecord('post')\n\n                // 2 - add `newPost` to the store\n                const viewerProxy = proxyStore.get(viewerId)\n                const connection = ConnectionHandler.getConnection(viewerProxy, 'ListPage_allPosts')\n                if (connection) {\n                    ConnectionHandler.insertEdgeAfter(connection, newPost)\n                }\n            },\n            onCompleted: () => {\n                callback()\n            },\n            onError: err => console.error(err)\n        }\n    )\n}","import React from 'react'\nimport { withRouter } from 'react-router'\nimport CreatePostMutation from './CreatePostMutation'\nimport { QueryRenderer, graphql } from 'react-relay'\nimport environment from './Environment'\nimport { Link } from 'react-router'\n\nconst CreatePageViewerQuery = graphql`\n    query CreatePageViewerQuery {\n        viewer {\n            id\n        }\n    }\n`\n\nclass CreatePage extends React.Component {\n    state = {\n        description: '',\n        imageUrl: ''\n    }\n\n    render () {\n        return (\n            <QueryRenderer \n            environment={environment}\n            query={CreatePageViewerQuery}\n            render={({error, props}) => {\n              if (error) {\n                return (\n                  <div>{error.message}</div>\n                )\n              } else if (props) {\n                return (\n                  <div className='w-100 pa4 flex justify-center'>\n                    <div style={{ maxWidth: 400 }} className=''>\n                      <input\n                        className='w-100 pa3 mv2'\n                        value={this.state.description}\n                        placeholder='Description'\n                        onChange={(e) => this.setState({description: e.target.value})}\n                      />\n                      <input\n                        className='w-100 pa3 mv2'\n                        value={this.state.imageUrl}\n                        placeholder='Image Url'\n                        onChange={(e) => this.setState({imageUrl: e.target.value})}\n                      />\n                      {this.state.imageUrl &&\n                        <img \n                          src={this.state.imageUrl} \n                          alt={this.state.description} \n                          className='w-100 mv3' \n                        />\n                      }\n                      {this.state.description && this.state.imageUrl &&\n                        <button className='pa3 bg-black-10 bn dim ttu pointer' onClick={() => this._handlePost(props.viewer.id)}>Post</button>\n                      }\n                      <div style={{textAlign: \"center\", color: \"red\"}}>\n                        <Link to=\"/\" >Cancel</Link>\n                      </div>\n                    </div>\n                  </div>\n                )\n              }\n              return (<div>loading</div>)\n            }}\n          />\n        )\n    }\n    _handlePost = (viewerId) => {\n        const {description, imageUrl} = this.state\n        CreatePostMutation(description, imageUrl, viewerId, () => this.props.router.replace('/'))\n    }\n}\n\nexport default withRouter(CreatePage)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport CreatePage from './CreatePage'\nimport registerServiceWorker from './registerServiceWorker'\nimport { Router, Route, browserHistory } from 'react-router'\n\nReactDOM.render(\n    <Router history={browserHistory}>\n        <Route path='/' component={App} />\n        <Route path='/create' component={CreatePage} />\n    </Router>\n    , document.getElementById('root')\n)\n\nregisterServiceWorker()\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n        navigator.serviceWorker\n          .register(swUrl)\n          .then(registration => {\n            registration.onupdatefound = () => {\n              const installingWorker = registration.installing;\n              installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                    // At this point, the old content will have been purged and\n                    // the fresh content will have been added to the cache.\n                    // It's the perfect time to display a \"New content is\n                    // available; please refresh.\" message in your web app.\n                    console.log('New content is available; please refresh.');\n                  } else {\n                    // At this point, everything has been precached.\n                    // It's the perfect time to display a\n                    // \"Content is cached for offline use.\" message.\n                    console.log('Content is cached for offline use.');\n                  }\n                }\n              };\n            };\n          })\n          .catch(error => {\n            console.error('Error during service worker registration:', error);\n          });\n      });\n    }\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }"],"sourceRoot":""}